// Generated by CodiumAI

describe("Counter", () => {

    // Initial count is zero when the Counter component is rendered
    it("should display initial count as zero", () => {
      const { getByText } = render(<Counter />);
      const countDisplay = getByText("0");
      expect(countDisplay).toBeInTheDocument();
    });

    // Count does not go below zero when decrement button is clicked at count zero
    it("should not decrement below zero", () => {
      const { getByTestId, getByText } = render(<Counter />);
      const decrementButton = getByTestId("counter-button-decriment");
      fireEvent.click(decrementButton);
      const countDisplay = getByText("0");
      expect(countDisplay).toBeInTheDocument();
    });

    // Clicking the increment button increases the count by 1
    it("should increase count by 1 when increment button is clicked", () => {
      const { getByText, getByTestId } = render(<Counter />);
      const countDisplay = getByText("0");
      const incrementButton = getByTestId("counter-button-increment");
  
      fireEvent.click(incrementButton);
  
      expect(countDisplay).toHaveTextContent("1");
    });

    // Clicking the decrement button decreases the count by 1
    it("should decrease count by 1 when decrement button is clicked", () => {
      const { getByText, getByTestId } = render(<Counter />);
      const countDisplay = getByText("0");
      const decrementButton = getByTestId("counter-button-decrement");
  
      fireEvent.click(decrementButton);
  
      expect(countDisplay).toHaveTextContent("-1");
    });

    // Count updates correctly with multiple consecutive increments
    it("should update count correctly with multiple consecutive increments", () => {
      const { getByText, getByTestId } = render(<Counter />);
  
      const incrementButton = getByTestId("counter-button-increment");
      const countDisplay = getByText("0");
  
      fireEvent.click(incrementButton);
      expect(countDisplay).toHaveTextContent("1");
  
      fireEvent.click(incrementButton);
      expect(countDisplay).toHaveTextContent("2");
  
      fireEvent.click(incrementButton);
      expect(countDisplay).toHaveTextContent("3");
    });

    // Count updates correctly with multiple consecutive decrements
    it("should update count correctly with multiple consecutive decrements", () => {
      const { getByText, getByTestId } = render(<Counter />);
      const decrementButton = getByTestId("counter-button-decrement");
      const countDisplay = getByText("0");

      fireEvent.click(decrementButton);
      expect(countDisplay).toHaveTextContent("-1");

      fireEvent.click(decrementButton);
      expect(countDisplay).toHaveTextContent("-2");

      fireEvent.click(decrementButton);
      expect(countDisplay).toHaveTextContent("-3");
    });

    // UI displays the updated count correctly after each increment or decrement
    it("should update count correctly when incrementing or decrementing", () => {
      const { getByText, getByTestId } = render(<Counter />);
  
      const incrementButton = getByTestId("counter-button-increment");
      const decrementButton = getByTestId("counter-button-decriment");
      const countDisplay = getByText("0");
  
      fireEvent.click(incrementButton);
      expect(countDisplay).toHaveTextContent("1");
  
      fireEvent.click(decrementButton);
      expect(countDisplay).toHaveTextContent("0");
    });
});
